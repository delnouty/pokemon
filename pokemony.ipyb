{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a275db57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Randomly selected Pokémon:\n",
      "bulbasaur\n",
      "pidgeot\n",
      "zubat\n",
      "caterpie\n",
      "onix\n",
      "vileplume\n",
      "kadabra\n",
      "clefairy\n",
      "ponyta\n",
      "sandshrew\n",
      "doduo\n",
      "wartortle\n",
      "muk\n",
      "dewgong\n",
      "farfetchd\n",
      "poliwag\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import random\n",
    "\n",
    "def fetch_pokemon_data(limit=100):\n",
    "    pokemon_list = []\n",
    "    for i in range(1, limit + 1):\n",
    "        url = f\"https://pokeapi.co/api/v2/pokemon/{i}\"\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            pokemon_list.append(data[\"name\"])\n",
    "        else:\n",
    "            print(f\"Failed to fetch data for Pokémon ID {i}\")\n",
    "    return pokemon_list\n",
    "\n",
    "def select_random_pokemon(pokemon_list, count=16):\n",
    "    return random.sample(pokemon_list, count)\n",
    "\n",
    "def main():\n",
    "    # Fetch data for the first 100 Pokémon\n",
    "    pokemon_list = fetch_pokemon_data(100)\n",
    "    \n",
    "    # Randomly select 16 Pokémon\n",
    "    random_pokemon = select_random_pokemon(pokemon_list, 16)\n",
    "    \n",
    "    print(\"Randomly selected Pokémon:\")\n",
    "    for pokemon in random_pokemon:\n",
    "        print(pokemon)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fb944f2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pokémon DataFrame:\n",
      "   id        name  base_experience  height  weight                abilities  \\\n",
      "0   1   bulbasaur               64       7      69  [overgrow, chlorophyll]   \n",
      "1   2     ivysaur              142      10     130  [overgrow, chlorophyll]   \n",
      "2   3    venusaur              263      20    1000  [overgrow, chlorophyll]   \n",
      "3   4  charmander               62       6      85     [blaze, solar-power]   \n",
      "4   5  charmeleon              142      11     190     [blaze, solar-power]   \n",
      "\n",
      "             types  \n",
      "0  [grass, poison]  \n",
      "1  [grass, poison]  \n",
      "2  [grass, poison]  \n",
      "3           [fire]  \n",
      "4           [fire]  \n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "def fetch_pokemon_data(limit=50):\n",
    "    pokemon_data = []\n",
    "    for i in range(1, limit + 1):\n",
    "        url = f\"https://pokeapi.co/api/v2/pokemon/{i}\"\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            pokemon_info = {\n",
    "                \"id\": data[\"id\"],\n",
    "                \"name\": data[\"name\"],\n",
    "                \"base_experience\": data[\"base_experience\"],\n",
    "                \"height\": data[\"height\"],\n",
    "                \"weight\": data[\"weight\"],\n",
    "                \"abilities\": [ability[\"ability\"][\"name\"] for ability in data[\"abilities\"]],\n",
    "                \"types\": [type_[\"type\"][\"name\"] for type_ in data[\"types\"]]\n",
    "            }\n",
    "            pokemon_data.append(pokemon_info)\n",
    "        else:\n",
    "            print(f\"Failed to fetch data for Pokémon ID {i}\")\n",
    "    return pokemon_data\n",
    "\n",
    "def save_to_dataframe(pokemon_data):\n",
    "    df = pd.DataFrame(pokemon_data)\n",
    "    return df\n",
    "\n",
    "def main():\n",
    "    # Fetch data for the first 100 Pokémon\n",
    "    pokemon_data = fetch_pokemon_data(100)\n",
    "    \n",
    "    # Save data to DataFrame\n",
    "    df = save_to_dataframe(pokemon_data)\n",
    "    \n",
    "    print(\"Pokémon DataFrame:\")\n",
    "    print(df.head())\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "46d2f628",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pokémon DataFrame:\n",
      "   id        name  base_experience  height  weight                abilities  \\\n",
      "0   1   bulbasaur               64       7      69  [overgrow, chlorophyll]   \n",
      "1   2     ivysaur              142      10     130  [overgrow, chlorophyll]   \n",
      "2   3    venusaur              263      20    1000  [overgrow, chlorophyll]   \n",
      "3   4  charmander               62       6      85     [blaze, solar-power]   \n",
      "4   5  charmeleon              142      11     190     [blaze, solar-power]   \n",
      "\n",
      "             types  stats.hp  stats.attack  stats.defense  \\\n",
      "0  [grass, poison]        45            49             49   \n",
      "1  [grass, poison]        60            62             63   \n",
      "2  [grass, poison]        80            82             83   \n",
      "3           [fire]        39            52             43   \n",
      "4           [fire]        58            64             58   \n",
      "\n",
      "   stats.special-attack  stats.special-defense  stats.speed  \n",
      "0                    65                     65           45  \n",
      "1                    80                     80           60  \n",
      "2                   100                    100           80  \n",
      "3                    60                     50           65  \n",
      "4                    80                     65           80  \n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "def fetch_pokemon_data(limit=100):\n",
    "    pokemon_data = []\n",
    "    for i in range(1, limit + 1):\n",
    "        url = f\"https://pokeapi.co/api/v2/pokemon/{i}\"\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            pokemon_info = {\n",
    "                \"id\": data[\"id\"],\n",
    "                \"name\": data[\"name\"],\n",
    "                \"base_experience\": data[\"base_experience\"],\n",
    "                \"height\": data[\"height\"],\n",
    "                \"weight\": data[\"weight\"],\n",
    "                \"abilities\": [ability[\"ability\"][\"name\"] for ability in data[\"abilities\"]],\n",
    "                \"types\": [type_[\"type\"][\"name\"] for type_ in data[\"types\"]],\n",
    "                \"stats\": {stat[\"stat\"][\"name\"]: stat[\"base_stat\"] for stat in data[\"stats\"]}\n",
    "            }\n",
    "            pokemon_data.append(pokemon_info)\n",
    "        else:\n",
    "            print(f\"Failed to fetch data for Pokémon ID {i}\")\n",
    "    return pokemon_data\n",
    "\n",
    "def save_to_dataframe(pokemon_data):\n",
    "    # Normalize the stats dictionary to separate columns\n",
    "    df = pd.json_normalize(pokemon_data)\n",
    "    return df\n",
    "\n",
    "def main():\n",
    "    # Fetch data for the first 100 Pokémon\n",
    "    pokemon_data = fetch_pokemon_data(100)\n",
    "    \n",
    "    # Save data to DataFrame\n",
    "    df = save_to_dataframe(pokemon_data)\n",
    "    \n",
    "    print(\"Pokémon DataFrame:\")\n",
    "    print(df.head())\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7d4f57d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Choose your Pokémon:\n",
      "1. rattata\n",
      "2. poliwhirl\n",
      "3. drowzee\n",
      "4. geodude\n",
      "5. farfetchd\n",
      "6. weepinbell\n",
      "7. magnemite\n",
      "8. squirtle\n",
      "9. sandshrew\n",
      "10. dugtrio\n",
      "11. onix\n",
      "12. ekans\n",
      "13. ivysaur\n",
      "14. arbok\n",
      "15. beedrill\n",
      "16. spearow\n",
      "Enter the number of your choice: 3\n",
      "\n",
      "Battle between drowzee and weepinbell!\n",
      "drowzee attacks weepinbell for 48 damage. weepinbell has 17 HP left.\n",
      "weepinbell attacks drowzee for 90 damage. drowzee has -30 HP left.\n",
      "drowzee fainted! weepinbell wins!\n",
      "\n",
      "Game Over!\n",
      "The winner is weepinbell with 17 HP remaining.\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "def fetch_pokemon_data(limit=50):\n",
    "    pokemon_data = []\n",
    "    for i in range(1, limit + 1):\n",
    "        url = f\"https://pokeapi.co/api/v2/pokemon/{i}\"\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            pokemon_info = {\n",
    "                \"id\": data[\"id\"],\n",
    "                \"name\": data[\"name\"],\n",
    "                \"base_experience\": data[\"base_experience\"],\n",
    "                \"height\": data[\"height\"],\n",
    "                \"weight\": data[\"weight\"],\n",
    "                \"abilities\": [ability[\"ability\"][\"name\"] for ability in data[\"abilities\"]],\n",
    "                \"types\": [type_[\"type\"][\"name\"] for type_ in data[\"types\"]],\n",
    "                \"stats\": {stat[\"stat\"][\"name\"]: stat[\"base_stat\"] for stat in data[\"stats\"]}\n",
    "            }\n",
    "            pokemon_data.append(pokemon_info)\n",
    "        else:\n",
    "            print(f\"Failed to fetch data for Pokémon ID {i}\")\n",
    "    return pokemon_data\n",
    "\n",
    "def save_to_dataframe(pokemon_data):\n",
    "    df = pd.json_normalize(pokemon_data)\n",
    "    return df\n",
    "\n",
    "def select_random_pokemon(pokemon_list, count=16):\n",
    "    return random.sample(pokemon_list, count)\n",
    "\n",
    "def choose_pokemon(pokemon_list):\n",
    "    print(\"Choose your Pokémon:\")\n",
    "    for i, pokemon in enumerate(pokemon_list):\n",
    "        print(f\"{i + 1}. {pokemon['name']}\")\n",
    "    choice = int(input(\"Enter the number of your choice: \")) - 1\n",
    "    return pokemon_list[choice]\n",
    "\n",
    "def battle(pokemon1, pokemon2):\n",
    "    print(f\"\\nBattle between {pokemon1['name']} and {pokemon2['name']}!\")\n",
    "    hp1 = pokemon1['stats']['hp']\n",
    "    hp2 = pokemon2['stats']['hp']\n",
    "    \n",
    "    while hp1 > 0 and hp2 > 0:\n",
    "        # Pokémon 1 attacks\n",
    "        attack1 = pokemon1['stats']['attack']\n",
    "        hp2 -= attack1\n",
    "        print(f\"{pokemon1['name']} attacks {pokemon2['name']} for {attack1} damage. {pokemon2['name']} has {hp2} HP left.\")\n",
    "        if hp2 <= 0:\n",
    "            print(f\"{pokemon2['name']} fainted! {pokemon1['name']} wins!\")\n",
    "            return pokemon1, hp1\n",
    "        \n",
    "        # Pokémon 2 attacks\n",
    "        attack2 = pokemon2['stats']['attack']\n",
    "        hp1 -= attack2\n",
    "        print(f\"{pokemon2['name']} attacks {pokemon1['name']} for {attack2} damage. {pokemon1['name']} has {hp1} HP left.\")\n",
    "        if hp1 <= 0:\n",
    "            print(f\"{pokemon1['name']} fainted! {pokemon2['name']} wins!\")\n",
    "            return pokemon2, hp2\n",
    "\n",
    "def main():\n",
    "    # Fetch data for the first 100 Pokémon\n",
    "    pokemon_data = fetch_pokemon_data(100)\n",
    "    \n",
    "    # Save data to DataFrame\n",
    "    df = save_to_dataframe(pokemon_data)\n",
    "    \n",
    "    # Randomly select 16 Pokémon\n",
    "    random_pokemon = select_random_pokemon(pokemon_data, 16)\n",
    "    \n",
    "    # Player chooses a Pokémon\n",
    "    player_pokemon = choose_pokemon(random_pokemon)\n",
    "    \n",
    "    # Randomly select an opponent Pokémon\n",
    "    opponent_pokemon = random.choice([p for p in random_pokemon if p != player_pokemon])\n",
    "    \n",
    "    # Start the battle\n",
    "    winner, remaining_hp = battle(player_pokemon, opponent_pokemon)\n",
    "    \n",
    "    # Show the results\n",
    "    print(\"\\nGame Over!\")\n",
    "    print(f\"The winner is {winner['name']} with {remaining_hp} HP remaining.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b7b7f0ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Round 1 ---\n",
      "\n",
      "Battle between clefairy and arcanine!\n",
      "clefairy attacks arcanine for 45 damage. arcanine has 45 HP left.\n",
      "arcanine attacks clefairy for 110 damage. clefairy has -40 HP left.\n",
      "clefairy fainted! arcanine wins!\n",
      "\n",
      "Battle between alakazam and nidoking!\n",
      "alakazam attacks nidoking for 50 damage. nidoking has 31 HP left.\n",
      "nidoking attacks alakazam for 102 damage. alakazam has -47 HP left.\n",
      "alakazam fainted! nidoking wins!\n",
      "\n",
      "Battle between golbat and dugtrio!\n",
      "golbat attacks dugtrio for 80 damage. dugtrio has -45 HP left.\n",
      "dugtrio fainted! golbat wins!\n",
      "\n",
      "Battle between bellsprout and pidgeot!\n",
      "bellsprout attacks pidgeot for 75 damage. pidgeot has 8 HP left.\n",
      "pidgeot attacks bellsprout for 80 damage. bellsprout has -30 HP left.\n",
      "bellsprout fainted! pidgeot wins!\n",
      "\n",
      "Battle between magneton and haunter!\n",
      "magneton attacks haunter for 60 damage. haunter has -15 HP left.\n",
      "haunter fainted! magneton wins!\n",
      "\n",
      "Battle between clefable and zubat!\n",
      "clefable attacks zubat for 70 damage. zubat has -30 HP left.\n",
      "zubat fainted! clefable wins!\n",
      "\n",
      "Battle between nidoran-f and nidoqueen!\n",
      "nidoran-f attacks nidoqueen for 47 damage. nidoqueen has 43 HP left.\n",
      "nidoqueen attacks nidoran-f for 92 damage. nidoran-f has -37 HP left.\n",
      "nidoran-f fainted! nidoqueen wins!\n",
      "\n",
      "Battle between gloom and machoke!\n",
      "gloom attacks machoke for 65 damage. machoke has 15 HP left.\n",
      "machoke attacks gloom for 100 damage. gloom has -40 HP left.\n",
      "gloom fainted! machoke wins!\n",
      "\n",
      "--- Round 2 ---\n",
      "\n",
      "Battle between nidoking and arcanine!\n",
      "nidoking attacks arcanine for 102 damage. arcanine has -12 HP left.\n",
      "arcanine fainted! nidoking wins!\n",
      "\n",
      "Battle between clefable and nidoqueen!\n",
      "clefable attacks nidoqueen for 70 damage. nidoqueen has 20 HP left.\n",
      "nidoqueen attacks clefable for 92 damage. clefable has 3 HP left.\n",
      "clefable attacks nidoqueen for 70 damage. nidoqueen has -50 HP left.\n",
      "nidoqueen fainted! clefable wins!\n",
      "\n",
      "Battle between machoke and magneton!\n",
      "machoke attacks magneton for 100 damage. magneton has -50 HP left.\n",
      "magneton fainted! machoke wins!\n",
      "\n",
      "Battle between golbat and pidgeot!\n",
      "golbat attacks pidgeot for 80 damage. pidgeot has 3 HP left.\n",
      "pidgeot attacks golbat for 80 damage. golbat has -5 HP left.\n",
      "golbat fainted! pidgeot wins!\n",
      "\n",
      "--- Round 3 ---\n",
      "\n",
      "Battle between machoke and clefable!\n",
      "machoke attacks clefable for 100 damage. clefable has -5 HP left.\n",
      "clefable fainted! machoke wins!\n",
      "\n",
      "Battle between pidgeot and nidoking!\n",
      "pidgeot attacks nidoking for 80 damage. nidoking has 1 HP left.\n",
      "nidoking attacks pidgeot for 102 damage. pidgeot has -19 HP left.\n",
      "pidgeot fainted! nidoking wins!\n",
      "\n",
      "--- Round 4 ---\n",
      "\n",
      "Battle between machoke and nidoking!\n",
      "machoke attacks nidoking for 100 damage. nidoking has -19 HP left.\n",
      "nidoking fainted! machoke wins!\n",
      "\n",
      "--- Tournament Winner ---\n",
      "The winner is machoke!\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "def fetch_pokemon_data(limit=50):\n",
    "    pokemon_data = []\n",
    "    for i in range(1, limit + 1):\n",
    "        url = f\"https://pokeapi.co/api/v2/pokemon/{i}\"\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            pokemon_info = {\n",
    "                \"id\": data[\"id\"],\n",
    "                \"name\": data[\"name\"],\n",
    "                \"base_experience\": data[\"base_experience\"],\n",
    "                \"height\": data[\"height\"],\n",
    "                \"weight\": data[\"weight\"],\n",
    "                \"abilities\": [ability[\"ability\"][\"name\"] for ability in data[\"abilities\"]],\n",
    "                \"types\": [type_[\"type\"][\"name\"] for type_ in data[\"types\"]],\n",
    "                \"stats\": {stat[\"stat\"][\"name\"]: stat[\"base_stat\"] for stat in data[\"stats\"]}\n",
    "            }\n",
    "            pokemon_data.append(pokemon_info)\n",
    "        else:\n",
    "            print(f\"Failed to fetch data for Pokémon ID {i}\")\n",
    "    return pokemon_data\n",
    "\n",
    "def save_to_dataframe(pokemon_data):\n",
    "    df = pd.json_normalize(pokemon_data)\n",
    "    return df\n",
    "\n",
    "def select_random_pokemon(pokemon_list, count=16):\n",
    "    return random.sample(pokemon_list, count)\n",
    "\n",
    "def battle(pokemon1, pokemon2):\n",
    "    print(f\"\\nBattle between {pokemon1['name']} and {pokemon2['name']}!\")\n",
    "    hp1 = pokemon1['stats']['hp']\n",
    "    hp2 = pokemon2['stats']['hp']\n",
    "    \n",
    "    while hp1 > 0 and hp2 > 0:\n",
    "        # Pokémon 1 attacks\n",
    "        attack1 = pokemon1['stats']['attack']\n",
    "        hp2 -= attack1\n",
    "        print(f\"{pokemon1['name']} attacks {pokemon2['name']} for {attack1} damage. {pokemon2['name']} has {hp2} HP left.\")\n",
    "        if hp2 <= 0:\n",
    "            print(f\"{pokemon2['name']} fainted! {pokemon1['name']} wins!\")\n",
    "            return pokemon1, hp1\n",
    "        \n",
    "        # Pokémon 2 attacks\n",
    "        attack2 = pokemon2['stats']['attack']\n",
    "        hp1 -= attack2\n",
    "        print(f\"{pokemon2['name']} attacks {pokemon1['name']} for {attack2} damage. {pokemon1['name']} has {hp1} HP left.\")\n",
    "        if hp1 <= 0:\n",
    "            print(f\"{pokemon1['name']} fainted! {pokemon2['name']} wins!\")\n",
    "            return pokemon2, hp2\n",
    "\n",
    "def run_tournament(pokemon_list):\n",
    "    round_number = 1\n",
    "    while len(pokemon_list) > 1:\n",
    "        print(f\"\\n--- Round {round_number} ---\")\n",
    "        next_round = []\n",
    "        random.shuffle(pokemon_list)\n",
    "        for i in range(0, len(pokemon_list), 2):\n",
    "            if i + 1 < len(pokemon_list):\n",
    "                winner, remaining_hp = battle(pokemon_list[i], pokemon_list[i + 1])\n",
    "                next_round.append(winner)\n",
    "            else:\n",
    "                next_round.append(pokemon_list[i])\n",
    "        pokemon_list = next_round\n",
    "        round_number += 1\n",
    "    \n",
    "    print(\"\\n--- Tournament Winner ---\")\n",
    "    print(f\"The winner is {pokemon_list[0]['name']}!\")\n",
    "\n",
    "def main():\n",
    "    # Fetch data for the first 100 Pokémon\n",
    "    pokemon_data = fetch_pokemon_data(100)\n",
    "    \n",
    "    # Save data to DataFrame\n",
    "    df = save_to_dataframe(pokemon_data)\n",
    "    \n",
    "    # Randomly select 16 Pokémon\n",
    "    random_pokemon = select_random_pokemon(pokemon_data, 16)\n",
    "    \n",
    "    # Run the tournament\n",
    "    run_tournament(random_pokemon)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6403fdd4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
